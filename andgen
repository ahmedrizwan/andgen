#!/usr/bin/env ruby

module MessagePrinter

  def colorize(text, color = "default", bgColor = "default")
    colors = {"default" => "38", "black" => "30", "red" => "31", "green" => "32", "brown" => "33", "blue" => "34", "purple" => "35",
              "cyan" => "36", "gray" => "37", "dark gray" => "1;30", "light red" => "1;31", "light green" => "1;32", "yellow" => "1;33",
              "light blue" => "1;34", "light purple" => "1;35", "light cyan" => "1;36", "white" => "1;37"}
    bgColors = {"default" => "0", "black" => "40", "red" => "41", "green" => "42", "brown" => "43", "blue" => "44",
                "purple" => "45", "cyan" => "46", "gray" => "47", "dark gray" => "100", "light red" => "101", "light green" => "102",
                "yellow" => "103", "light blue" => "104", "light purple" => "105", "light cyan" => "106", "white" => "107"}
    color_code = colors[color]
    bgColor_code = bgColors[bgColor]
    "\033[#{bgColor_code};#{color_code}m#{text}\033[0m"
  end

  def error message
    puts "#{colorize("  Error ", "red")}: "+message
  end

  def green message
    "#{colorize(message, "green")}"
  end

  def yellow message
    "#{colorize(message, "yellow")}"
  end

  def use_help
    puts "Use --help to see available commands."
  end

  def command_not_found
    puts
    puts error("Command not found, use --help to see available commands.")
  end

  def wrong_number_of_args
    puts error("Wrong number of arguments, use --help to see correct format and commands.")
  end

  def not_correct_format
    puts error("Not a correct format, use --help to see available options.")
  end

  def flags_and_package_optional
    puts "-l  : Generates a layout file"
    puts "-bl : Generates a bindable layout file"
    puts
    puts "Package and Layout flags are optional"
    puts
  end

  def activity_examples
    puts
    puts yellow("Example : ") + "andgen activity [-l or -bl] MainActivity [some.package]"
    puts
    flags_and_package_optional
  end

  def created file
    puts "#{colorize("  Created   ", "yellow")}"+file
  end

  def updated file
    puts "#{colorize("  Updated   ", "green")}"+file
  end

  def help_0
    puts yellow "Android Generators"
    puts yellow("  Command          ")+ "|" + yellow("   Arguments       ")
    puts '  -------------------------------------------------------------------'
    puts '  activity         |  Optional[Flag] [ActivityName] Optional[Package]'
    puts '  fragment         |  Optional[Flag] [FragmentName] Optional[Package]'
    puts '  layout           |  Optional[Flag] [layout_name] Optional[Package] '
    puts '  -------------------------------------------------------------------'
    puts
    puts yellow "Optional flags"
    puts yellow("  Flag             ")+ "|" + yellow("   Definition       ")
    puts '  ------------------------------------------------------------------'
    puts '  -l               |   Generates layout file '
    puts '  -bl              |   Generates bindable layout file '
    puts '  ------------------------------------------------------------------'
    puts
    puts 'Default package: top-most is selected.'
  end

  def version_0
    puts 'Andgen v1.0.0'
  end
end

module Helper

  def is_flag? flag_or_name
    case flag_or_name
      when '-l'
        return true
      when '-bl'
        return true
      else
        return false
    end
  end

  def resolve_package package
    #check if the source path is found
    Dir.glob('**/src/main/').select {
        |d|
      puts d
      src_path = d
    }
    if src_path == ''
      error ('Source path not found i.e. /src/main/java/')
      return
    end

    #create package path and return it
    folders = package.to_s.split('.')
    folders_hash = folders.map { |x| [x, false] }.to_h
    path_from_package = package.to_s.gsub '.', '/'
    paths = []
    path = ""
    #find the path
    src_path = ''
    d = Dir.glob("**/main/java/**/*").select {
        |d|
      if d.to_s.end_with? path_from_package
        paths << d
      end
    }
    src_path = src_path+'java/'
    if paths.length == 0
      #create the package manually
      puts 'Creating teh package manually'
      package_path = src_path+path_from_package
      puts package_path
      FileUtils.mkdir_p(package_path)
    elsif paths.length == 1
      return paths[0]
    else
      puts yellow 'Package conflict - Select one from the following'
      index = 0
      paths.each do |p|
        puts "#{index+1}. " + p
        index+=1
      end
      path = get_selection(paths)
      return path
    end
  end

  def resolve_module
    if ARGV.length <= 1
      return true
    end
    @module_dir = Dir.pwd
    if module_or_not
      return true
    else
      error 'Make sure you are at module root'
    end
  end

  def module_or_not
    Dir.chdir(@module_dir)
    Dir.glob("*").select { |d|
      if File.basename(d).to_s == 'src'
        return true
      end
    }
    return false
  end

  def check_for_default_module
    Dir.glob("*").select { |d|
      if File.basename(d).to_s == 'app'
        @module_dir = @module_dir + "/" + d
      end
    }
    return module_or_not
  end

  def create_file file, template
    File.open(file, 'w') { |file| file.write(template) }
    created file
  end

  def find_me_manifest
    d = Dir.glob("**/main/**/*").select {
        |file|
      if File.basename(file).to_s == 'AndroidManifest.xml'
        return file
      end
    }
    return :nothing
  end

  def get_selection(paths)
    begin
      selection = STDIN.gets
    rescue Interrupt => e
      exit
    end
    if is_numeric(selection) and selection.to_i > 0 and selection.to_i < paths.length+1
      path = paths[selection.to_i - 1]
    else
      puts yellow 'Wrong input, select again '
      get_selection(paths)
    end
    path
  end

  def is_numeric input
    true if Integer(input) rescue false
  end

  def add_activity_to_manifest(activity)
    path = find_me_manifest
    case path
      when :nothing
        puts error 'Manifest not found!'
      else
        lines = File.readlines(path)
        line_number = 0
        lines.each do |line|
          if line.to_s.include?('</application>')
            lines[line_number-1] << get_manifest_activity(activity)
          end
          line_number = line_number+1
        end
        File.open(path, 'w') { |file|
          lines.each { |line|
            file.puts line
          }
        }
        updated path
    end
  end

  def get_manifest_activity activity
    "        <activity android:name=\".#{activity}\">
        </activity>"
  end

end

module Templates
  def activity_template name
    return "import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

public class #{name} extends AppCompatActivity
{

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
    }

}"
  end

  def layout_template
    return '<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="match_parent"
              android:layout_height="match_parent">

</LinearLayout>'
  end

  def bindable_layout_template
    return '<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android">
<LinearLayout android:orientation="vertical"
              android:layout_width="match_parent"
              android:layout_height="match_parent">

</LinearLayout>
</layout>'
  end
end

module Activity

  def activity_0
    activity_examples
  end

  def activity_1 flag_or_name
    if is_flag?(flag_or_name)
      activity_examples
    else
      create_activity flag_or_name
    end
  end

  def activity_2 flag_or_name, package_or_name
    if is_flag? flag_or_name
      create_layout_file flag_or_name, package_or_name
      create_activity package_or_name
    else
      create_activity_package flag_or_name, package_or_name
    end
  end

  def activity_3 flag, name, package
    if is_flag? flag
      create_layout_file flag, name
      create_activity_package name, package
    else
      not_correct_format
    end
  end

  def create_activity file_name
    target_path = get_me_path_for "/src/main/java"

    if target_path.to_s.end_with? '.java'
      file = File.dirname(target_path)+'/'+file_name+'.java'
    else
      file = target_path+'/'+file_name+'.java'
    end
    if File.file?(file)
      puts error(file +" already exists!")
      return
    end
    create_file file, activity_template(file_name)
    add_activity_to_manifest file_name
  end

  def get_me_path_for path
    Dir.chdir(@module_dir)
    src_path = @module_dir+path
    FileUtils.mkpath src_path
    target_path = Dir.glob(src_path+"/**/*").last
    target_path = src_path if target_path == nil
    target_path
  end

  def create_activity_package file_name, package
    package_path = resolve_package package


    #find the first folder
    # dir = resolve_package package
    # if folders_hash.values.all? { |x| x }
    #   #simply create the Activity inside the package
    #   file = dir+'/'+file_name+'.java'
    #   if File.file?(file)
    #     puts error(file +" already exists!")
    #     return
    #   end
    #   File.open(file, 'w') { |file| file.write(activity_template(file_name)) }
    #
    #   created file
    #   add_activity_to_manifest file_name
    # else
    #   complete_path = dir
    #   folders_hash.select {
    #       |d|
    #     puts d
    #     unless folders_hash[d]
    #       complete_path = complete_path+'/'+d
    #       puts complete_path
    #       FileUtils.mkdir_p(complete_path)
    #     end
    #   }
    #   #simply create the Activity inside the package
    #   file = complete_path+'/'+file_name+'.java'
    #   if File.file?(file)
    #     puts error(file +" already exists!")
    #     return
    #   end
    #   File.open(file, 'w') { |f| f.write(activity_template(file_name)) }
    #
    #   created file
    #   add_activity_to_manifest file_name
    # end

  end

end

module Layout

  def underscore(camel_cased_word)
    camel_cased_word.to_s.gsub(/::/, '/').
        gsub(/([A-Z]+)([A-Z][a-z])/, '\1_\2').
        gsub(/([a-z\d])([A-Z])/, '\1_\2').
        tr("-", "_").
        downcase
  end

  def create_layout_file flag, camel_file_name
    puts 'Create Layout'
    layout_path = get_me_path_for "/src/main/res/layout"
    file_name = underscore camel_file_name
    file = layout_path+'/'+file_name+'.xml'
    if File.file?(file)
      puts error(file +" already exists!")
      return
    end

    if flag == '-l'
      File.open(file, 'w') { |f| f.write layout_template }
    else
      File.open(file, 'w') { |f| f.write bindable_layout_template }
    end
    created file
  end
end

class ArgumentsHandler

  def start
    if resolve_module
      case ARGV.length
        when 0
          handle_zero_args
        when 1
          handle_one_arg ARGV[0]
        when 2
          handle_two_args ARGV[0], ARGV[1]
        when 3
          handle_three_args ARGV[0], ARGV[1], ARGV[2]
        when 4
          handle_four_args ARGV[0], ARGV[1], ARGV[2], ARGV[3]
        else
          handle_wrong_num_args
      end
    end

  end

  def command_is_accepted? command
    accepted_commands = ['activity', 'fragment', '--help', '--version']
    accepted_commands.to_a.include?(command)
  end

  def handle_zero_args
    use_help
  end

  def handle_one_arg command
    #check if the command is accepted
    if command_is_accepted? command
      send(command.to_s.sub('--', '')+'_0')
    else
      command_not_found
    end
  end

  def handle_two_args command, flag_or_name
    if command_is_accepted? command
      send(command+'_1', flag_or_name)
    else
      command_not_found
    end
  end

  def handle_three_args command, flag_or_name, package
    if command_is_accepted? command
      send(command+'_2', flag_or_name, package)
    else
      command_not_found
    end
  end

  def handle_four_args command, flag, name, package
    if command_is_accepted? command
      send(command+'_3', flag, name, package)
    else
      command_not_found
    end
  end

  def handle_wrong_num_args
    wrong_number_of_args
  end

end

require 'fileutils'

include MessagePrinter
include Helper
include Activity
include Layout
include Templates

ArgumentsHandler.new.start


